<Window x:Class="Launcher.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Launcher"
        xmlns:viewModels="clr-namespace:Launcher.ViewModel"
        mc:Ignorable="d" WindowStartupLocation="CenterScreen"
        Title="MainWindow" Height="650" Width="1100" ShowInTaskbar="True"
        WindowStyle="None"
        ResizeMode="NoResize" Loaded="Window_Loaded"
        KeyDown="Window_KeyDown" Closing="Window_Closing" Closed="Window_Closed"
        xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" xmlns:local1="clr-namespace:SinRpLauncher"
        Icon="images/mta.ico">
    <WindowChrome.WindowChrome>
        <WindowChrome GlassFrameThickness="0" CornerRadius="30" CaptionHeight="0" UseAeroCaptionButtons="False" ResizeBorderThickness="0"/>
    </WindowChrome.WindowChrome>
    <Window.DataContext>
        <viewModels:MainViewModel/>
        <!-- Устанавливаем DataContext -->
    </Window.DataContext>

    <Window.Background>
        <SolidColorBrush Color="Transparent"/>
    </Window.Background>

    <Window.Resources>
        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="White"/>

        <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="#202427"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="Wheat"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="Gray"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="Gray"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="#202427"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="White"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#202427"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background" Color="#202427"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                                <Setter Property="BorderThickness" Value="6"></Setter>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxTemplate1" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" Background="Black" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <theme:SystemDropShadowChrome x:Name="shadow" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border x:Name="dropDownBorder" Background="{DynamicResource ComboBox.MouseOver.Background}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid Background="Transparent" x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Grid.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="1" ScaleX="1" />
                                        </TransformGroup>
                                    </Grid.RenderTransform>
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                             Duration="0:0:1"
                                             From="0.5"
                                             To="1" />
                                <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY"
                                             Duration="0:0:1"
                                             From="0.5"
                                             To="1" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="Gray"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Name="TBr" x:Key="Button.MouseOver.Background" Color="#ffd900"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#ffd900"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Style.Triggers>
                <!--<Trigger Property="Button.IsMouseOver" Value="True">
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect x:Name="dropEffect" Color="Yellow" Direction="320" BlurRadius="40" ShadowDepth="1" Opacity="1"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>-->
            </Style.Triggers>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--<EventTrigger RoutedEvent="Button.MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation From="#FFBE17" To="Yellow" Duration="0:0:0.5" Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Button.MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation From="Yellow" To="#FFBE17" Duration="0:0:0.5"  Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FocusVisual1">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Ellipse" x:Name="EllipseNewsStyle">
            <Setter Property="Stroke" Value="Transparent"></Setter>
        </Style>

        <SolidColorBrush x:Key="Button.Static.Background1" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border1" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background1" Color="#7042fc"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border1" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Background1" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border1" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Disabled.Background1" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border1" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground1" Color="#FF838383"/>
        <Style x:Key="SocialMediaStyleButton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual1}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background1}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border1}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="10" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background1}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border1}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background1}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border1}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background1}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border1}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground1}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush Color="#ffd900" x:Key="TechSupportButton.Foreground"></SolidColorBrush>
        <Style x:Key="FocusVisual2">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="Button.Static.Background2" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border2" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background2" Color="#575757"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border2" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Background2" Color="#575757"/>
        <SolidColorBrush x:Key="Button.Pressed.Border2" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Disabled.Background2" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border2" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground2" Color="#FF838383"/>
        <Style x:Key="TechSupportButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual2}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background2}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border2}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background2}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border2}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background2}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border2}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background2}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border2}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground2}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="FocusVisual3">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background3" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Static.Border3" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background3" Color="#383838"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border3" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Background3" Color="#575757"/>
        <SolidColorBrush x:Key="Button.Pressed.Border3" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Disabled.Background3" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border3" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground3" Color="#FF838383"/>
        <Style x:Key="NavButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual3}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background3}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border3}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--<EventTrigger RoutedEvent="Button.MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation From="#1A1E22" To="#383838" Duration="0:0:0.2" Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Button.MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation From="#383838" To="#1A1E22" Duration="0:0:0.2"  Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="FocusVisual4">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="Button.Static.Background4" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border4" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background4" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border4" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Background4" Color="Black"/>
        <SolidColorBrush x:Key="Button.Pressed.Border4" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Disabled.Background4" Color="Gray"/>
        <SolidColorBrush x:Key="Button.Disabled.Border4" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground4" Color="White"/>
        <Style x:Key="UpdateButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual4}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background4}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border4}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Storyboard x:Key="SettingsStoryBoardEnter">
            <ColorAnimation From="White" To="Gray" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.3"  />
        </Storyboard>

        <Storyboard x:Key="CloseStoryBoardEnter">
            <ColorAnimation From="Black" To="Gray" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.3"  />
        </Storyboard>

        <Storyboard x:Key="CloseStoryBoardLeave">
            <ColorAnimation From="Gray" To="Black" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.3"  />
        </Storyboard>

        <Storyboard x:Key="MinimizeStoryBoardEnter">
            <ColorAnimation From="Black" To="Gray" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.3"  />
        </Storyboard>

        <Storyboard x:Key="MinimizeBoardLeave">
            <ColorAnimation From="Gray" To="Black" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.3"  />
        </Storyboard>


        <Style x:Key="TextBoxStyle" TargetType="TextBox">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="CaretBrush">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="5,5">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Color="Gray" Offset="2" />
                            <GradientStop Color="Gray" Offset="3" />
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#202427"/>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <!--<EventTrigger RoutedEvent="MouseEnter">
                    <BeginStoryboard >
                        <Storyboard >
                            <DoubleAnimation Storyboard.TargetProperty="Background.GradientStops[0].Offset" From="0" To="1" Duration="0:0:0.5"></DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>

                <EventTrigger RoutedEvent="MouseLeave" >
                    <BeginStoryboard >
                        <Storyboard >
                            <DoubleAnimation Storyboard.TargetProperty="Background.GradientStops[0].Offset" From="1" To="0" Duration="0:0:0.5"></DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>-->
            </Style.Triggers>
        </Style>

        <SolidColorBrush x:Key="ThemeBorderBG" Color="White"/>
        <SolidColorBrush x:Key="SettingsBorderBG" Color="Transparent"/>
        <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF06B025"/>
        <SolidColorBrush x:Key="ProgressBar.Background" Color="#ffff"/>
        <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>
        <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
            <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
            <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid x:Name="TemplateRoot">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate"/>
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                            </PointAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border Background="{TemplateBinding Background}" Tag="prgrsBG" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                            <Border x:Name="PART_Track"/>
                            <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                                <Border x:Name="Indicator" Tag="prgrsFG" Background="{TemplateBinding Foreground}"/>
                                <Border x:Name="Animation" Tag="prgrsFG" Background="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                </Border>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="true">
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <SolidColorBrush x:Key="LoadNewsRect" Color="Gray" Opacity="0.10"/>
        <Style x:Key="FocusVisual5">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background5" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border5" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background5" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border5" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background5" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border5" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background5" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border5" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground5" Color="#FF838383"/>
        <Style x:Key="CMButtonsStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual5}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background5}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border5}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="30" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        
        

        <SolidColorBrush x:Key="MainGridBG" Color="#161616"/>
        <SolidColorBrush x:Key="ToggleFill" Color="#9c9a9a"/>
        <SolidColorBrush x:Key="FirstNewsToggleFill" Color="#FFBE17"/>
        <SolidColorBrush x:Key="ToGameBtnBG" Color="#F3A22A"/>
        <SolidColorBrush x:Key="DiscordBtnBG" Color="Black"/>
        <SolidColorBrush x:Key="VkBtnBG" Color="Black"/>
        <SolidColorBrush x:Key="YoutubeBtnBG" Color="Black"/>
        <SolidColorBrush x:Key="MinimizeBtnBG" Color="Transparent"/>
        <SolidColorBrush x:Key="MinimizeBtnFG" Color="White"/>
        <SolidColorBrush x:Key="CloseBtnBG" Color="Transparent"/>
        <SolidColorBrush x:Key="CloseBtnFG" Color="#F3A22A"/>
        <SolidColorBrush x:Key="UpdateBorderPanelBG" Color="#424242"/>
        <SolidColorBrush x:Key="UserImgContainerBG" Color="#F3A22A"/>


        
        
        
        <Style x:Key="ContextMenuStyle1" TargetType="{x:Type ContextMenu}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="FontFamily" Value="Roboto"/>
            <Setter Property="FontSize" Value="10"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border x:Name="Border" BorderThickness="0" CornerRadius="15" Background="White">
                            <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ContextMenu x:Key="ButtonContextMenu" Style="{DynamicResource ContextMenuStyle1}">
            <MenuItem Header="Сменить цвета" Click="ChangeColorControlMenuItem_Click"/>
        </ContextMenu>

        <ContextMenu x:Key="LabelContextMenu" Style="{DynamicResource ContextMenuStyle1}">
            <MenuItem Header="Сменить цвета" Click="ChangeColorControlMenuItem_Click"/>
        </ContextMenu>

        <ContextMenu x:Key="TextBoxContextMenu" Style="{DynamicResource ContextMenuStyle1}">
            <MenuItem Header="Сменить цвета" Click="ChangeColorControlMenuItem_Click"/>
        </ContextMenu>

        <ContextMenu x:Key="GridContextMenu" Style="{DynamicResource ContextMenuStyle1}">
            <MenuItem Header="Сменить цвета" Click="ChangeColorControlMenuItem_Click"/>
        </ContextMenu>

        <ContextMenu x:Key="TextBlockContextMenu" Style="{DynamicResource ContextMenuStyle1}">
            <MenuItem Header="Сменить цвета" Click="ChangeColorControlMenuItem_Click"/>
        </ContextMenu>

        <ContextMenu x:Key="ProgressBarContextMenu" Style="{DynamicResource ContextMenuStyle1}">
            <MenuItem Header="Сменить цвета" Click="ChangeColorControlMenuItem_Click"/>
        </ContextMenu>

        <ContextMenu x:Key="ComboBoxContextMenu" Style="{DynamicResource ContextMenuStyle1}">
            <MenuItem Header="Сменить цвета" Click="ChangeColorControlMenuItem_Click"/>
        </ContextMenu>

        <ContextMenu x:Key="BorderContextMenu" Style="{DynamicResource ContextMenuStyle1}">
            <MenuItem Header="Сменить цвета" Click="ChangeColorControlMenuItem_Click"/>
        </ContextMenu>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <ControlTemplate x:Key="NickNameBoxTempl" TargetType="{x:Type TextBoxBase}">
            <Border x:Name="border" Background="{TemplateBinding Background}" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="FocusVisual6">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background6" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border6" Color="Gray"/>
        <Style x:Key="SocialMediaButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual6}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background6}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border6}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1.5"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="7" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ListBox.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ListBox.Static.Border" Color="#FFABADB3"/>
        <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>
        <Style x:Key="FocusVisual7">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ScrollBar.Static.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ScrollBar.Static.Glyph" Color="#606060"/>
        <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="#CDCDCD"/>
        <SolidColorBrush x:Key="ScrollBar.MouseOver.Background" Color="#DADADA"/>
        <SolidColorBrush x:Key="ScrollBar.MouseOver.Border" Color="#DADADA"/>
        <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="#000000"/>
        <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="#A6A6A6"/>
        <SolidColorBrush x:Key="ScrollBar.Pressed.Background" Color="#606060"/>
        <SolidColorBrush x:Key="ScrollBar.Pressed.Border" Color="#606060"/>
        <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="#606060"/>
        <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="ScrollBar.Disabled.Background" Color="#F0F0F0"/>
        <SolidColorBrush x:Key="ScrollBar.Disabled.Border" Color="#F0F0F0"/>
        <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="#BFBFBF"/>
        <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual7}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="border" Background="{StaticResource ScrollBar.Static.Background}" BorderBrush="{StaticResource ScrollBar.Static.Border}" BorderThickness="1" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border x:Name="border" Background="{StaticResource ScrollBar.Static.Thumb}" CornerRadius="5" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="5"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ScrollBar.MouseOver.Thumb}"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ScrollBar.Pressed.Thumb}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="true">
                                <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ContainerVerticalScrollBarStyle" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Background" Value="{StaticResource ScrollBar.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ScrollBar.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1,0"/>
            <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" SnapsToDevicePixels="true">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                                <RowDefinition Height="0.00001*"/>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            </Grid.RowDefinitions>
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Row="1"/>
                            <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                        <ControlTemplate.Triggers>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="MinWidth" Value="0"/>
                    <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="BorderThickness" Value="0,1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                        <ColumnDefinition Width="0.00001*"/>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    </Grid.ColumnDefinitions>
                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="1"/>
                                    <RepeatButton x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                        <Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" Fill="{StaticResource ScrollBar.Static.Glyph}" Margin="3" Stretch="Uniform"/>
                                    </RepeatButton>
                                    <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                                        </Track.Thumb>
                                    </Track>
                                    <RepeatButton x:Name="PART_LineRightButton" Command="{x:Static ScrollBar.LineRightCommand}" Grid.Column="2" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                        <Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" Fill="{StaticResource ScrollBar.Static.Glyph}" Margin="3" Stretch="Uniform"/>
                                    </RepeatButton>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                            <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBar.Pressed.Glyph}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                            <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBar.Pressed.Glyph}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                            <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBar.MouseOver.Glyph}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                            <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBar.MouseOver.Glyph}"/>
                                    </MultiDataTrigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBar.Disabled.Glyph}"/>
                                        <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBar.Disabled.Glyph}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ServersScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="Corner" Grid.Column="1" Fill="Black" Grid.Row="1"/>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanHorizontallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" CanVerticallyScroll="False" Grid.Column="0" Content="{TemplateBinding Content}" CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                            <ScrollBar Style="{DynamicResource ContainerVerticalScrollBarStyle}" x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Width="1" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ServersListBoxContainerStyle" TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="{StaticResource ListBox.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
                            <ScrollViewer Style="{DynamicResource ServersScrollViewerStyle}" Focusable="false" Padding="{TemplateBinding Padding}">
                                <ScrollViewer.Resources>
                                    <Style TargetType="ScrollBar">
                                        <Style.Triggers>
                                            <Trigger Property="Orientation" Value="Vertical">
                                                <Setter Property="Width" Value="2"/>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="BorderBrush" Value="Transparent"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ScrollViewer.Resources>

                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FocusVisual8">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background7" Color="Gray"/>
        <SolidColorBrush x:Key="Button.Static.Border7" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background6" Color="Gray"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border6" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background6" Color="Gray"/>
        <SolidColorBrush x:Key="Button.Pressed.Border6" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background6" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border6" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground6" Color="#FF838383"/>
        <Style x:Key="StopDownloadButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual8}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background7}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border7}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="10">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background6}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border6}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background6}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border6}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background6}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border6}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground6}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid Name="MainGrid" Background="{DynamicResource MainGridBG}" ContextMenu="{StaticResource GridContextMenu}">
        <Grid x:Name="SubGridMaskImg">
            <!-- Grid mask for picture as background -->
            <Grid.Background>
                <ImageBrush ImageSource="{Binding MainBGImg}" Opacity="2"/>
            </Grid.Background>
        </Grid>
        <!--<Border x:Name="UpdateBorderPanel" Background="{DynamicResource UpdateBorderPanelBG}" CornerRadius="5" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom" ContextMenu="{DynamicResource BorderContextMenu}">-->

        <Grid Name="TopBarGrid" Margin="0,0,0,580" Background="Transparent" Grid.ColumnSpan="2" MouseLeftButtonDown="TopBarGrid_MouseLeftDown">
            <Grid.Resources>
                <Style TargetType="Grid">
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                </Style>
            </Grid.Resources>

            <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Left" Height="35" Margin="50,0,0,0">
                <Label Name="ProjectLabel" Content="{Binding LabelProjectNameText}" Foreground="White" FontFamily="Fonts/#Montserrat SemiBold" FontSize="23" 
                       VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                       Margin="0,0,0,0" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"
                       ContextMenu="{StaticResource LabelContextMenu}"/>

                <Label x:Name="SubProjectLabel" Content="{Binding SubLabelProjectText}" Foreground="White" FontFamily="Fonts/#Montserrat Light" FontSize="23" 
                       VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                       Opacity="0.4"
                       Margin="0,0,0,0" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"
                       ContextMenu="{StaticResource LabelContextMenu}"/>
            </StackPanel>

            <Label x:Name="BuildName" Content="{Binding VerN}" Foreground="White" HorizontalAlignment="Left" VerticalAlignment="Top"/>


            <Image x:Name="ForumImg" Source="{Binding WebsiteIcon}" Width="13" Height='13' 
                   HorizontalAlignment="Center" VerticalAlignment="Bottom"
                   Margin="400,0,0,8"/>
            <Button x:Name="NavBarForumButton" Style="{DynamicResource NavButtonStyle}" Content="{Binding NavBarForumButtonText}" FontSize="15" FontFamily="Fonts/#Montserrat SemiBold" Foreground="White" 
                    VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="490,0,0,0"
                    Width="130" Height="30" Click="SocialMediaButton_Click"
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter"  MouseLeave="Button_MouseLeave">
                <Button.Resources>
                    <Style TargetType="Border">
                        <Setter Property="CornerRadius" Value="7"/>
                    </Style>
                </Button.Resources>
            </Button>


            <Image x:Name="TechSupportImg" Source="{Binding HelpIcon}" Width="13" Height='13' 
                   HorizontalAlignment="Center" VerticalAlignment="Bottom"
                   Margin="70,0,0,8"/>
            <Button x:Name="NavBarTechSupportButton" Style="{DynamicResource NavButtonStyle}" Content="{Binding NavBarTechSupportButtonText}" FontSize="15" FontFamily="Fonts/#Montserrat SemiBold" Foreground="White" 
                    VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="210,0,0,0"
                    Width="130" Height="30" Click="SocialMediaButton_Click"
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter"  MouseLeave="Button_MouseLeave">
                <Button.Resources>
                    <Style TargetType="Border">
                        <Setter Property="CornerRadius" Value="7"/>
                    </Style>
                </Button.Resources>
            </Button>


            <Image x:Name="CabinetImg" Source="{Binding CabinetIcon}" Width="13" Height='13' 
                   HorizontalAlignment="Center" VerticalAlignment="Bottom"
                   Margin="0,0,165,8"/>
            <Button x:Name="NavBarCabinetButton" Style="{DynamicResource NavButtonStyle}" Content="{Binding NavBarCabinetButtonText}" FontSize="15"
                    Foreground="White" 
                    VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,70,0"
                    FontFamily="Fonts/#Montserrat SemiBold"
                    Width="130" Height="30" Click="SocialMediaButton_Click"
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter"  MouseLeave="Button_MouseLeave">
                <Button.Resources>
                    <Style TargetType="Border">
                        <Setter Property="CornerRadius" Value="7"/>
                    </Style>
                </Button.Resources>
            </Button>


            <!--<Image x:Name="ProfilesImg" Source="{Binding ProfilesIcon}" Width="13" Height='13' 
                   HorizontalAlignment="Center" VerticalAlignment="Bottom"
                   Margin="0,0,450,8"/>-->
            <!--<Button x:Name="NavBarUserProfilesButton" Style="{DynamicResource NavButtonStyle}" Content="{Binding NavBarUserProfilesButtonText}" FontSize="15" FontFamily="Fonts/#Montserrat SemiBold" Foreground="White" 
                    VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,350,0"
                    Width="130" Height="30" Click="UserProfiles_Click" 
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter"  MouseLeave="Button_MouseLeave">
                <Button.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="7"/>
                    </Style>
                </Button.Resources>
            </Button>-->


            <Button x:Name="SettingsButton" Style="{DynamicResource CMButtonsStyle}" Tag="UC" Background="{DynamicResource SettingsBorderBG}" Height="20" Width="30" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,110,4" Click="SettingsButton_Click"
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter"  MouseLeave="Button_MouseLeave">
                <Image x:Name="SettingImage" Source="{Binding SettingsIcon}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Width="15" Height="15" Margin="0,0,0,0"></Image>
                <Button.Resources>
                    <Style TargetType="Border">
                        <Setter Property="CornerRadius" Value="30"/>
                    </Style>
                </Button.Resources>
            </Button>

            <Button x:Name="MinimizeButton" Style="{DynamicResource CMButtonsStyle}" Width="15" Height="40" Content="_" Background="{DynamicResource MinimizeBtnBG}"
                    Foreground="{DynamicResource MinimizeBtnFG}" FontSize="25" 
                    HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                    VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,70,5" Click="MinimizedButton_Click"
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter" MouseLeave="Button_MouseLeave">
            </Button>

            <!-- Button Content -->
            <Button x:Name="CloseButton" Style="{DynamicResource CMButtonsStyle}" Background="{DynamicResource CloseBtnBG}" Foreground="{DynamicResource CloseBtnFG}" 
                    Content="X" FontSize="20" Tag="UC" Width="20" Height="24" 
                    HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,35,7" Click="CloseButton_Click"
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter" MouseLeave="Button_MouseLeave">
            </Button>

            <!--<Button x:Name="UpdateDownloadButton" Style="{DynamicResource UpdateButtonStyle}" Content="{Binding UpdateButtonText}" Width="80" Height="20" Foreground="White" Background="Black" HorizontalAlignment="Left" Margin="640,35,0,0" VerticalAlignment="Top" Click="UpdateDownloadButton_Click"
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter" MouseLeave="Button_MouseLeave">
                <Button.Resources>
                    <Style TargetType="Border">
                        <Setter Property="CornerRadius" Value="7"/>
                    </Style>
                </Button.Resources>
            </Button>-->
        </Grid>

        <Grid Name="BottomBarGrid" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,10" Width="1100" Height="85">
            <Grid.Background>
                <SolidColorBrush Color="Transparent" Opacity="0.15"/>
            </Grid.Background>
            <Grid.Resources>
                <Style TargetType="Grid">
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                </Style>
            </Grid.Resources>

            <Button x:Name="toGameButton" Style="{DynamicResource ButtonStyle1}" Tag="UC" Content="{Binding ToGameButtonText}" Padding="10" FontFamily="Tahoma" FontSize="17" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalAlignment="Center" HorizontalAlignment="Right" BorderThickness="0" Background="{DynamicResource ToGameBtnBG}" Margin="0,0,55,0" Width="160" Height="50" Click="ToGameButton_Click"
                    MouseEnter="Button_MouseEnter"  MouseLeave="Button_MouseLeave" Grid.Column="1">
                <Button.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="5"/>
                    </Style>
                </Button.Resources>
                <Button.ContextMenu>
                    <StaticResource ResourceKey="ButtonContextMenu"/>
                </Button.ContextMenu>
            </Button>
            <Image Source="{Binding GamepadIcon}" Width="20" Height="20" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,14,210,0" Visibility="Hidden" Grid.Column="1"/>


            <!--<ComboBox Template="{DynamicResource ComboBoxTemplate1}" x:Name="ServersBox" ItemsSource="{Binding SourceArrayServers}" Foreground="White" SelectedIndex="0" HorizontalAlignment="Left" Margin="355,0,0,0" VerticalAlignment="Center" Visibility="Hidden" BorderThickness="0" Width="220" Height="50" SelectionChanged="ServersBox_SelectionChanged" ContextMenu="{DynamicResource ComboBoxContextMenu}" Grid.ColumnSpan="2">
                <ComboBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ComboBoxItem}">
                        <Setter Property="Height" Value="50" />
                        <Setter Property="Width" Value="220" />
                    </Style>
                </ComboBox.ItemContainerStyle>
            </ComboBox>
            <Border x:Name="ServersBoxCap" Tag="UC" Background="{DynamicResource ToGameBtnBG}" CornerRadius="3,3,0,0" Height="4" Width="{Binding Width, ElementName=ServersBox}" Margin="415,16,343,66" Visibility="Hidden" ContextMenu="{DynamicResource BorderContextMenu}" Grid.ColumnSpan="2"/>
            <TextBlock x:Name="PlayersTextBlock" Text="Игроков: 1000/1000" Foreground="White" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="415,0,0,0" Visibility="Hidden" ContextMenu="{DynamicResource TextBlockContextMenu}" Grid.ColumnSpan="2" Height="15"/>-->


            <Border x:Name="NicknameInputContainer" Width="240" Height="{Binding Height, ElementName=NickNameBox}" 
                  VerticalAlignment="{Binding VerticalAlignment, ElementName=NickNameBox}"
                  HorizontalAlignment="{Binding HorizontalAlignment, ElementName=NickNameBox}"
                  Margin="{Binding Margin, ElementName=NickNameBox}"
                  CornerRadius="10"
                    ContextMenu="{StaticResource BorderContextMenu}">
                <Border.Background>
                    <SolidColorBrush Color="Black" Opacity="0.4"/>
                </Border.Background>
                <Grid>
                    <Border x:Name="NickNameBoxImgBorder" CornerRadius="10" Background="{DynamicResource UserImgContainerBG}" 
                            HorizontalAlignment="Left" 
                            Width="35" Height="35"
                            Margin="10,0,0,0" ContextMenu="{StaticResource BorderContextMenu}">
                        <Image Source="{Binding PersonNickanemIng}"
                                Width="20"
                                Height="20"
                                HorizontalAlignment="Center" VerticalAlignment="Center"
                                Margin="0,0,0,0"/>
                    </Border>
                </Grid>
                <!--<Grid.Effect>
                    <DropShadowEffect ShadowDepth="0"
                              Direction="0"
                              Color="White"
                              Opacity="0.3"
                              BlurRadius="4"/>
                </Grid.Effect>-->
            </Border>
            <TextBox Template="{DynamicResource NickNameBoxTempl}" x:Name="NickNameBox" Style="{DynamicResource TextBoxStyle}" Width="190" Height="50" 
                     Padding="5,0,0,0" TextWrapping="NoWrap" FontSize="15" 
                     BorderThickness="0" BorderBrush="Transparent" Background="Transparent"
                     HorizontalAlignment="Right" VerticalContentAlignment="Center" 
                     HorizontalContentAlignment="Center" Text="" VerticalAlignment="Center"
                     Margin="0,0,250,0"
                     TextChanged="NickNameBox_TextChanged"
                     LostFocus="NickNameBox_LostFocus"
                     >
            </TextBox>
            <TextBlock x:Name="PlaceHolderNickNameBox" Text="{Binding PlaceHolderNickNameBox}" Opacity="0.4" TextAlignment="Center" Foreground="White" TextWrapping="Wrap" HorizontalAlignment="Right" VerticalAlignment="Center" 
                       Margin="{Binding Margin, ElementName=NickNameBox}"
                       Height="{Binding Height, ElementName=NickNameBox}" Width="{Binding Width, ElementName=NickNameBox}" 
                       MouseDown="PlaceHolderNickNameBox_MouseDown"/>
        </Grid>

        <Grid x:Name="UpdateStatusContainer" HorizontalAlignment="Left" VerticalAlignment="Bottom"
              Margin="40,0,0,20" Height="70" Width="400">

            <Button x:Name="RefreshCheckConnetionBorderButton" Style="{DynamicResource CMButtonsStyle}" Tag="UC" Width="13" Height="13" Background="White" Margin="230,0,0,30" Click="RefreshCheckConnetionBorderButton_Click"
                    ContextMenu="{StaticResource ButtonContextMenu}" MouseEnter="Button_MouseEnter" MouseLeave="Button_MouseLeave">
                <Image Source="{Binding RefreshIcon}" Width="10" Height="10"/>
            </Button>

            <Border x:Name="WaitRefreshIcon" Tag="UC" Width="13" Height="13" CornerRadius="20" Background="White" Margin="265,0,0,30">
                <Image Source="{Binding WaitRefreshIcon}" Width="12" Height="12"/>
            </Border>

            <Ellipse x:Name="UpdateAndInternetIndicator" Fill="LightGreen"
                     Height="10" Width="10"
                     VerticalAlignment="Center" HorizontalAlignment="Left" Margin="20,0,0,0" />

            <TextBlock x:Name="TextBlockUpdates" Foreground="White" Text="{Binding TextBlockUpdatesText}" FontSize="15" 
                       FontWeight="Bold" VerticalAlignment="Top" HorizontalAlignment="Left"
                       Margin="60,10,0,20" FontFamily="Montserrat" ContextMenu="{DynamicResource TextBlockContextMenu}"/>

            <TextBlock x:Name="SubTextBlockUpdates" Foreground="White" Text="Loading..." FontSize="14" 
                       Opacity="0.6"
                       FontWeight="DemiBold" VerticalAlignment="Top" HorizontalAlignment="Left"
                       Margin="60,30,0,20" FontFamily="Montserrat" ContextMenu="{DynamicResource TextBlockContextMenu}"
                       />


            <Button Style="{DynamicResource StopDownloadButtonStyle}" x:Name="StopDownloadButton" 
                    Width="70" Height="20" 
                    Margin="270,10,0,0"
                    BorderThickness="0"
                    Content="Stop"
                    Foreground="#ffffff"
                    Visibility="Hidden"
                    ContextMenu="{StaticResource ButtonContextMenu}"
                    MouseEnter="Button_MouseEnter" MouseLeave="Button_MouseLeave"
                    Click="StopDownloadButton_Click"></Button>
            
            <ProgressBar x:Name="UpdateProgressBar" Style="{DynamicResource ProgressBarStyle}" Value="10"
                         Height="5" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="310" BorderBrush="Transparent" BorderThickness="0"
                         Maximum="100" Minimum="0" Margin="60,0,0,10" ContextMenu="{DynamicResource ProgressBarContextMenu}"/>
        </Grid>

        <Grid x:Name="NavBarGrid" Background="Transparent" 
              HorizontalAlignment="Left" VerticalAlignment="Center"
              Width="450" Height="300"
              Margin="37,0,0,30">

            <ListBox x:Name="ServersContainerListBox" Style="{DynamicResource ServersListBoxContainerStyle}"
                     Background="Transparent" BorderThickness="0" 
                     Height="210" Width="{Binding ElementName=NavBarGrid, Path=Width}" 
                     VerticalAlignment="Top" SelectionChanged="ServersContainerListBox_SelectionChanged"
                     >
                <local1:ServerContainer x:Name="Server_1" ServerNameText="Server 1" CurrentPlayersCount="1" 
                                        AllPlayersCount="1000" ServerPicked="False" Width="400" Margin="0,0,0,4"
                                        ContextMenu="{DynamicResource ButtonContextMenu}"/>
                <local1:ServerContainer x:Name="Server_2" ServerNameText="Server 2" CurrentPlayersCount="1" 
                                        AllPlayersCount="1000" ServerPicked="False" IsActive="False" Width="400" Margin="0,0,0,4"
                                        ContextMenu="{DynamicResource ButtonContextMenu}"/>
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="IsSelected" Value="{Binding Content.IsSelected, Mode=TwoWay, RelativeSource={RelativeSource Self}}"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    <ContentPresenter/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.Resources>
                    <Style TargetType="ListBoxItem">
                        <Style.Resources>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black"/>
                        </Style.Resources>
                    </Style>
                </ListBox.Resources>
            </ListBox>


            <TextBlock x:Name="SocialMediaText" Text="{Binding SocialMediaText}" Foreground="White" 
                       HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="20,0,0,60"
                       FontSize="15" FontFamily="Fonts/#Montserrat SemiBold"/>
            <StackPanel x:Name="SocialMediaContainer" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                        Height="50" Width="200" Margin="20,0,0,0">
                <Button x:Name="YoutubeButton" Style="{DynamicResource SocialMediaButtonStyle}" Background="{DynamicResource YoutubeBtnBG}" 
                        Margin="0,0,25,0" Width="40" Height="40" 
                    VerticalAlignment="Bottom" HorizontalAlignment="Center" Click="SocialMediaButton_Click"
                    MouseEnter="SocialMediaButton_MouseEnter" MouseLeave="SocialMediaButton_MouseLeave">
                    <Image Source="{Binding YouTubeIcon}" Width="20" Margin="0,2,0,0"/>
                </Button>

                <Button x:Name="VkButton" Style="{DynamicResource SocialMediaButtonStyle}" Background="{DynamicResource VkBtnBG}" Tag="UC" 
                        Margin="0,0,25,0" Width="40" Height="40" 
                        VerticalAlignment="Bottom" HorizontalAlignment="Center" Click="SocialMediaButton_Click"
                        MouseEnter="SocialMediaButton_MouseEnter" MouseLeave="SocialMediaButton_MouseLeave">
                    <Image Source="{Binding VkIcon}" Width="20" Margin="0,2,0,0"/>
                </Button>

                <Button x:Name="DiscordButton" Style="{DynamicResource SocialMediaButtonStyle}" Background="{DynamicResource DiscordBtnBG}" Tag="UC" 
                        Margin="0,0,0,0" Width="40" Height="40"
                        VerticalAlignment="Bottom" HorizontalAlignment="Center" Click="SocialMediaButton_Click"
                        MouseEnter="SocialMediaButton_MouseEnter" MouseLeave="SocialMediaButton_MouseLeave">
                    <Image Source="{Binding DiscordIcon}" Width="23" Margin="2,0,2,0"/>
                </Button>
            </StackPanel>
        </Grid>

        <Grid Background="Transparent" Margin="0,160,50,159" Width="510" Height="340" HorizontalAlignment="Right" VerticalAlignment="Center">
            <Border x:Name="LoadNewsBG" BorderThickness="3" HorizontalAlignment="Left" CornerRadius="10" Height="270" VerticalAlignment="Top" Margin="5,5,0,0" Width="500">
                <Border.Background>
                    <SolidColorBrush Color="White" Opacity="0.6"/>
                </Border.Background>
                <Border.Effect>
                    <BlurEffect Radius="20" KernelType="Gaussian"/>
                </Border.Effect>
            </Border>

            <Border CornerRadius="7" BorderBrush="Transparent" BorderThickness="5" VerticalAlignment="Top" Height="280" Margin="0,0,0,50">
                <Grid>
                    <Border x:Name="NewsImageBorderMask"
                        Background="White"
                        BorderThickness=".5"
                        CornerRadius="7">
                    </Border>
                    <Image x:Name="NewsImg1" Panel.ZIndex="155" Source="{Binding NewsImg1}" Stretch="Fill" HorizontalAlignment="Left" Height="280" VerticalAlignment="Top" Width="505" ImageFailed="NewsImg_ImageFailed"/>
                    <Image x:Name="NewsImg2" Panel.ZIndex="154" Source="{Binding NewsImg2}" Stretch="Fill" HorizontalAlignment="Left" Height="280" VerticalAlignment="Top" Width="505" ImageFailed="NewsImg_ImageFailed"/>
                    <Image x:Name="NewsImg3" Panel.ZIndex="153" Source="{Binding NewsImg3}" Stretch="Fill" HorizontalAlignment="Left" Height="280" VerticalAlignment="Top" Width="505" ImageFailed="NewsImg_ImageFailed"/>
                    <Image x:Name="NewsImg4" Panel.ZIndex="152" Source="{Binding NewsImg4}" Stretch="Fill" HorizontalAlignment="Left" Height="280" VerticalAlignment="Top" Width="505" ImageFailed="NewsImg_ImageFailed"/>
                    <Image x:Name="NewsImg5" Panel.ZIndex="151" Source="{Binding NewsImg5}" Stretch="Fill" HorizontalAlignment="Left" Height="280" VerticalAlignment="Top" Width="505" ImageFailed="NewsImg_ImageFailed"/>
                    <Grid.OpacityMask>
                        <VisualBrush Visual="{Binding ElementName=NewsImageBorderMask}"/>
                    </Grid.OpacityMask>
                </Grid>
            </Border>

            <Grid x:Name="NewsTogglesContainer" Background="Transparent" Margin="205,300,205,15">
                <Ellipse HorizontalAlignment="Left" x:Name="Frst1" Fill="{DynamicResource FirstNewsToggleFill}" Height="10" Margin="0,10,0,0" VerticalAlignment="Top" Width="10" MouseLeftButtonDown="NewsToggle_MouseLeftButtonDown"></Ellipse>
                <Ellipse HorizontalAlignment="Left" x:Name="Scnd2" Fill="{DynamicResource ToggleFill}" Height="10" Margin="20,10,0,0" VerticalAlignment="Top" Width="10" MouseLeftButtonDown="NewsToggle_MouseLeftButtonDown"/>
                <Ellipse HorizontalAlignment="Left" x:Name="Thrd3" Fill="{DynamicResource ToggleFill}" Height="10" Margin="40,10,0,0" VerticalAlignment="Top" Width="10" MouseLeftButtonDown="NewsToggle_MouseLeftButtonDown"/>
                <Ellipse HorizontalAlignment="Left" x:Name="Frth4" Fill="{DynamicResource ToggleFill}" Height="10" Margin="60,10,0,0" VerticalAlignment="Top" Width="10"  MouseLeftButtonDown="NewsToggle_MouseLeftButtonDown"/>
                <Ellipse HorizontalAlignment="Left" x:Name="Fvth5" Fill="{DynamicResource ToggleFill}" Height="10" Margin="80,10,0,0" VerticalAlignment="Top" Width="10" MouseLeftButtonDown="NewsToggle_MouseLeftButtonDown"/>
            </Grid>
        </Grid>
    </Grid>
</Window>
